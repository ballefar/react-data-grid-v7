{"version":3,"file":"RowGrouper.js","sourceRoot":"","sources":["../../src/data/RowGrouper.js"],"names":[],"mappings":"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","sourcesContent":["import { _utils } from 'react-data-grid-v7';\nimport Resolver from './RowGrouperResolver';\n\nconst { isImmutableCollection } = _utils;\n\nclass RowGrouper {\n  constructor(columns, expandedRows, isImmutable = false) {\n    this.columns = columns.slice(0);\n    this.expandedRows = expandedRows;\n    this.resolver = new Resolver(isImmutable);\n  }\n\n  isRowExpanded(columnName, name) {\n    let isExpanded = true;\n    const expandedRowGroup = this.expandedRows[columnName];\n    if (expandedRowGroup && expandedRowGroup[name]) {\n      isExpanded = expandedRowGroup[name].isExpanded;\n    }\n    return isExpanded;\n  }\n\n  groupRowsByColumn(rows, columnIndex = 0) {\n    let nextColumnIndex = columnIndex;\n    const columnName = this.columns.length > 0 && typeof this.columns[columnIndex] === 'string' ? this.columns[columnIndex] : this.columns[columnIndex].key;\n    const columnGroupDisplayName = this.columns.length > 0 && typeof this.columns[columnIndex] === 'string' ? this.columns[columnIndex] : this.columns[columnIndex].name;\n    const groupedRows = this.resolver.getGroupedRows(rows, columnName);\n    const keys = this.resolver.getGroupKeys(groupedRows);\n    let dataviewRows = this.resolver.initRowsCollection();\n\n    for (const key of keys) {\n      const isExpanded = this.isRowExpanded(columnName, key);\n      const rowGroupHeader = { name: key, __metaData: { isGroup: true, treeDepth: columnIndex, isExpanded, columnGroupName: columnName, columnGroupDisplayName } };\n\n      dataviewRows = this.resolver.addHeaderRow(rowGroupHeader, dataviewRows);\n\n      if (isExpanded) {\n        nextColumnIndex = columnIndex + 1;\n        if (this.columns.length > nextColumnIndex) {\n          dataviewRows = dataviewRows.concat(this.groupRowsByColumn(this.resolver.getRowObj(groupedRows, key), nextColumnIndex));\n          nextColumnIndex = columnIndex - 1;\n        } else {\n          dataviewRows = dataviewRows.concat(this.resolver.getRowObj(groupedRows, key));\n        }\n      }\n    }\n    return dataviewRows;\n  }\n}\n\nconst groupRows = (rows, groupedColumns, expandedRows) => {\n  const rowGrouper = new RowGrouper(groupedColumns, expandedRows, isImmutableCollection(rows));\n  return rowGrouper.groupRowsByColumn(rows, 0);\n};\n\nexport default groupRows;\n"]}