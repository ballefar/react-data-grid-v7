{"version":3,"file":"RowGrouperResolver.js","sourceRoot":"","sources":["../../src/data/RowGrouperResolver.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AAC5C,OAAO,OAAO,MAAM,gBAAgB,CAAC;AAE7B,IAAA,sCAAc,EAAE,8DAA0B,CAAY;AAE9D;IACE,4BAAY,WAAW;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,0BAA0B,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC;IACpE,CAAC;IAED,+CAAkB,GAAlB;QACE,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACtD,CAAC;IAED,2CAAc,GAAd,UAAe,IAAI,EAAE,UAAU;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAArD,CAAqD,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IACjI,CAAC;IAED,yCAAY,GAAZ,UAAa,WAAW;QACtB,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;QAC1B,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,OAAO,GAAG,UAAC,GAAG;gBACZ,IAAM,IAAI,GAAG,EAAE,CAAC;gBAChB,IAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;gBAC5B,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAE3B,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;oBACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACtB,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;iBACxB;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,CAAC;SACH;QACD,OAAO,OAAO,CAAC,WAAW,CAAC,CAAC;IAC9B,CAAC;IAED,yCAAY,GAAZ,UAAa,cAAc,EAAE,YAAY;QACvC,IAAM,IAAI,GAAG,YAAY,CAAC;QAC1B,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACzC,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,OAAO,MAAM,CAAC;SACf;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACH,yBAAC;AAAD,CAAC,AAxCD,IAwCC","sourcesContent":["import { _utils } from 'react-data-grid-v7';\nimport groupBy from 'lodash/groupBy';\n\nconst { isImmutableMap, getMixedTypeValueRetriever } = _utils;\n\nexport default class RowGrouperResolver {\n  constructor(isImmutable) {\n    this.isImmutable = isImmutable;\n    this.getRowObj = getMixedTypeValueRetriever(isImmutable).getValue;\n  }\n\n  initRowsCollection() {\n    return this.isImmutable ? new Immutable.List() : [];\n  }\n\n  getGroupedRows(rows, columnName) {\n    return this.isImmutable ? rows.groupBy(x => isImmutableMap(x) ? x.get(columnName) : x[columnName]) : groupBy(rows, columnName);\n  }\n\n  getGroupKeys(groupedRows) {\n    let getKeys = Object.keys;\n    if (this.isImmutable) {\n      getKeys = (col) => {\n        const keys = [];\n        const iterator = col.keys();\n        let item = iterator.next();\n\n        while (!item.done) {\n          keys.push(item.value);\n          item = iterator.next();\n        }\n        return keys;\n      };\n    }\n    return getKeys(groupedRows);\n  }\n\n  addHeaderRow(rowGroupHeader, dataviewRows) {\n    const rows = dataviewRows;\n    const dvRows = rows.push(rowGroupHeader);\n    if (this.isImmutable) {\n      return dvRows;\n    }\n    return rows;\n  }\n}\n"]}